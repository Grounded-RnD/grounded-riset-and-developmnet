@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: #161616;
}
*,
*::before,
*::after {
  @apply box-border;
}

* {
  @apply m-0;
}

body {
  @apply bg-[#030712];
}

.wrapper {
  mask-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 1) 20%, rgba(0, 0, 0, 1) 90%, rgba(0, 0, 0, 0));
}
.teams-wrapper {
  mask-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 1) 5%, rgba(0, 0, 0, 1) 90%, rgba(0, 0, 0, 0));
}

@keyframes scrollLeft {
  to {
    left: -200px;
  }
}

@keyframes scrollRight {
  to {
    right: -200px;
  }
}

.itemLeft,
.itemRight {
  /* @apply w-[200px] h-[100px] bg-red-500 rounded-[6px] absolute; */
  animation-timing-function: linear;
  animation-duration: 30s;
  animation-iteration-count: infinite;
}

.itemLeft {
  left: max(calc(100px * 6), 100%);
  animation-name: scrollLeft;
}

.itemRight {
  right: max(calc(100px * 8), calc(100% + 50px));
  animation-name: scrollRight;
}

.item1 {
  animation-delay: calc(30s / 6 * (6 - 1) * -1);
}

.item2 {
  animation-delay: calc(30s / 6 * (6 - 2) * -1);
}

.item3 {
  animation-delay: calc(30s / 6 * (6 - 3) * -1);
}

.item4 {
  animation-delay: calc(30s / 6 * (6 - 4) * -1);
}

.item5 {
  animation-delay: calc(30s / 6 * (6 - 5) * -1);
}

.item6 {
  animation-delay: calc(30s / 6 * (6 - 6) * -1);
}

/* .item7 {
  animation-delay: calc(30s / 8 * (8 - 7) * -1);
}

.item8 {
  animation-delay: calc(30s / 8 * (8 - 8) * -1);
} */
/* {
  animation-delay: calc(30s / 8 * (8 - 3) * -1);
}

.item4 {
  animation-delay: calc(30s / 8 * (8 - 4) * -1);
}

.item5 {
  animation-delay: calc(30s / 8 * (8 - 5) * -1);
}

.item6 {
  animation-delay: calc(30s / 8 * (8 - 6) * -1);
}

.item7 {
  animation-delay: calc(30s / 8 * (8 - 7) * -1);
}

.item8 {
  animation-delay: calc(30s / 8 * (8 - 8) * -1);
} */
